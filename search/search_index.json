{"config":{"lang":["en"],"separator":"[\\s]","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Einf\u00fchrung","text":"<p>Infrastruture as Code in DevOps Projekten mit Computacenter.</p> <p> </p>"},{"location":"#ziel","title":"Ziel","text":"<p>Als kleines Projekt sollst du automatisiert die Konfiguration der Ansible Automation Platform (kurz AAP) anpassen. Die AAP bietet unter anderem ein Web-UI f\u00fcr die einfache Ausf\u00fchrung von Ansible Automatisierung, Hochverf\u00fcgbarkeit, Authentifizierung, Auditing, Logging und vieles mehr. Die AAP selbst kann aber auch \u00fcber eine API automatisiert werden, der Code daf\u00fcr ist als sogenanntes Ansible Playbook bereits erstellt, muss aber angepasst werden.  </p> <p>Success</p> <p>Automate the automation (platform)!</p>"},{"location":"#tipps","title":"Tipps","text":"<p>Du wirst in den folgenden drei Teilen den typischen Entwickler-Workflow durchlaufen und mit vielen Tools und Prozessen in Ber\u00fchrung kommen, welche dir tagt\u00e4glich in einem DevOps-Projekt begegnen werden.</p> <p>Info</p> <p>Die folgenden Seiten bieten Tabs zur Aufgabenbeschreibung in kurz und knapp oder mit ausf\u00fchrlicher Erkl\u00e4rung, du kannst zwischen den beiden Tabs wechseln.</p> Kurz und knappAusf\u00fchrliche Erkl\u00e4rung <p>Hier findest du nur das n\u00f6tigste.</p> <pre><code>tip: Use the small copy button on the right!\n</code></pre> <p>In diesem Tab wird alles etwas ausf\u00fchrlicher beschrieben, mit zus\u00e4tzlichen Informationen zu den verwendeten Kommandos oder Hintergrund-Infos zu der zugrunde liegenden Technologie.  </p> <p>Der Inhalt aller Code-Bl\u00f6cke kann \u00fcber einen kleinen Copy-Button rechts im Code-Feld kopiert werden.</p> <p>Tip</p> <p>Mit der rechten Maustauste kann der kopierte Content im Terminal eingef\u00fcgt werden.</p>"},{"location":"#start","title":"Start","text":"<p> - Los gehts mit der Vorbereitung der Demo-Umgebung!</p>"},{"location":"part1/","title":"Teil 1 - Vorbereitung","text":"<p>Als erstes bereitest du dir deine Demo/Entwicklungsumgebung vor.</p> <p>Du wirst mit einigen Tools aus einem typischen DevOps-Projekt in Kontakt kommen:</p> <ul> <li>Ansible</li> <li>Ansible Automation Platform</li> <li>Git &amp; Github</li> <li>VS Code</li> </ul> Kurz und knappAusf\u00fchrliche Erkl\u00e4rung <p>Ansible ist eine Open-Source-IT-Automatisierungs-Engine, welche die Provisionierung, das Config-Management, die Application Deployment, Orchestrierung und viele andere IT-Prozesse automatisiert. Die Ansible Automation Platform ist eine integrierte L\u00f6sung f\u00fcr den Einsatz von Ansible im Unternehmen. Die Plattform umfasst einen Controller mit  Webkonsole und REST-API, Execution Environments, Authentifizierung und RBAC, Logging und Auditing, Credential- und Inventory-Handling, sowie Workflows zur Modellierung und Ausf\u00fchrung der Automatisierung komplexer Prozesse. Git ist der de-facto Standard zur Versionskontrolle von Code und ist integraler Bestandteil jedes Software-getriebenen Projekts. Visual Studio Code (kurz VS Code) ist ein kostenloser Quelltext-Editor von Microsoft. Visual Studio Code ist plattform\u00fcbergreifend f\u00fcr die Betriebssysteme Windows, macOS und Linux verf\u00fcgbar und erm\u00f6glicht u.a. Syntaxhighlighting, Debugging, Autovervollst\u00e4ndigung und Versionsverwaltung.</p>"},{"location":"part1/#1-anmeldung-demoumgebung","title":"1 - Anmeldung Demoumgebung","text":"<p>Eine Demoumgebung ist bereitgestellt, ihr ben\u00f6tigt lediglich einen Laptop und Internetzugang.  </p> <p>     Workshop URL: https://catalog.partner.demo.redhat.com/workshop/qh4bpg     Workshop Passwort: Dein Trainer wird dir das Passwort nennen! </p> <p>Gib deine E-Mail-Adresse ein (du bekommst keine Post, dies dient lediglich der Zuordnung zu den einzelnen Workshop-Instanzen) und das entsprechende Workshop-Passwort, du wirst auf eine Workshop-\u00dcbersichtsseite mit einigen Links weitergeleitet.</p>"},{"location":"part1/#2-code-editor-vorbereiten","title":"2 - Code-Editor vorbereiten","text":"Kurz und knappAusf\u00fchrliche Erkl\u00e4rung <p>Um den Code (das Ansible Playbook) anzupassen, verwendest du VSCode (eine IDE = Integrated Developer Environment), dort ist alles installiert was du zur Programmierung brauchst.</p> <p>Im Abschnitt \"2 -  image Visual Studio Code\", nutze den Link zu \"Console URL\". Kopiere dir das Passwort, du musst es einmal im n\u00e4chsten Tab eingeben.</p> <p>Es wird ein VS Code Editor im Browser gestartet, warte bis er vollst\u00e4ndig geladen ist.</p> <p>Warning</p> <p>Die Demo-Umgebung ist eigentlich f\u00fcr einen kompletten Ansible Workshop gedacht! Du f\u00fchrst heute aber einige fortgeschrittene Dinge aus, welche nicht Teil des urspr\u00fcnglichen Workshops sind.</p> <p>Nutze nicht die angezeigte Beschreibung!</p>"},{"location":"part1/#3-github-projekt-klonen","title":"3 - Github Projekt klonen","text":"<p>\u00d6ffne ein Terminal. In der Men\u00fcleiste Terminal w\u00e4hlen und auf New Terminal klicken.  </p> Kurz und knappAusf\u00fchrliche Erkl\u00e4rung <p>In das Home-Verzeichnis wechseln:</p> <pre><code>cd ~\n</code></pre> <p>Das Github-Projekt klonen:</p> <pre><code>git clone https://github.com/TimGrt/IaC-Demo.git\n</code></pre> <p>Im Terminal/der Linux-Kommandozeile sicherstellen, dass du im Home-Verzeichnis bist:</p> <pre><code>cd ~\n</code></pre> <p>Das Github-Projekt mit dem Automatisierungs-Playbook klonen, dazu das folgende Kommando ausf\u00fchren:</p> <pre><code>git clone https://github.com/TimGrt/IaC-Demo.git\n</code></pre> <p>Tip</p> <p>Wenn du die Werte von der Workshop-\u00dcbersichtsseite kopiert hast, kannst du sie mit der rechten Maustauste in der Konsole einf\u00fcgen.</p> <p>Beim erstmaligen Einf\u00fcgen (rechte Maustaste) ist eine Best\u00e4tigung notwendig:</p> <p> </p> <p>Hier Zulassen w\u00e4hlen.</p> Kurz und knappAusf\u00fchrliche Erkl\u00e4rung <p>Ordner mit Projekt-Code \u00f6ffnen. Im Men\u00fcband auf File und Open Folder... klicken. Hier den Ordner <code>/home/student/IaC-Demo/</code> w\u00e4hlen und mit Enter best\u00e4tigen. \u00d6ffne wieder ein Terminal, in der Men\u00fcleiste Terminal w\u00e4hlen und auf New Terminal klicken.</p> <p>Mit dem Clone des Projekts ist ein neuer Ordner entstanden, diesen \u00fcber das Men\u00fcband File und Open Folder... \u00f6ffnen (<code>/home/student/IaC-Demo/</code>). Das Browser-Fenster aktualisiert sich, auf der linken Seite ist eine Ordner- und Dateiansicht zu sehen. \u00d6ffne wieder ein Terminal wie zuvor, um sp\u00e4ter die Automatisierung ausf\u00fchren zu k\u00f6nnen. In der Men\u00fcleiste Terminal w\u00e4hlen und auf New Terminal klicken.</p> Optional: Farbschema f\u00fcr Syntax-Highlighting anpassen <p>Die Ansible Extension unterst\u00fctzt Syntax-Highlighting f\u00fcr Ansible-Inhalte. Je nach verwendeten Theme von VScode wird dies m\u00f6glicherweise nicht korrekt angezeigt. Verwende das Dark+ Theme. Klicke auf File in der oberen Men\u00fcleiste, gehe auf Preferences, Theme und klicke auf Color Theme. Hier Dark+ (default dark) w\u00e4hlen.</p> <p></p> <p>Die Warnung <code>Unable to write to user settings.</code> kann ignoriert werden.</p> <p> - Weiter gehts mit der Development Stage!</p>"},{"location":"part2/","title":"Development","text":"<p>Die Konfiguration der Automation Platform wird \u00fcber ein Ansible Playbook angepasst, du kannst das Playbook mit dem folgenden Kommando im Terminal/auf der Kommandozeile ausf\u00fchren:</p> <pre><code>ansible-navigator run playbook_controller_automation.yml\n</code></pre> <p>Bei den ersten Ausf\u00fchrungen wirst du mit einigen Fehlermeldung konfrontiert, es fehlen Dependencies, Credentials und auch ein Teil der Automatisierung an sich.</p>"},{"location":"part2/#1-credentials-exportieren","title":"1 - Credentials exportieren","text":"Kurz und knappAusf\u00fchrliche Erkl\u00e4rung <p>Exportiere (definiere) die folgenden drei Variablen:</p> <ul> <li><code>CONTROLLER_HOST</code></li> <li><code>CONTROLLER_USERNAME</code></li> <li><code>CONTROLLER_PASSWORD</code></li> </ul> <p>Exportiere alle drei Variablen, f\u00fcr <code>CONTROLLER_USERNAME</code> beispielsweise die folgende Zeile kopieren und im Terminal einf\u00fcgen:</p> <pre><code>export CONTROLLER_USERNAME=admin\n</code></pre> <p>Nutze die Werte aus der Workshop-\u00dcbersichtsseite aus Abschnitt 3.</p> <p>Um die AAP automatisieren zu k\u00f6nnen, muss sich das Playbook bei der Ausf\u00fchrung an der API anmelden, die notwendigen Credentials werden als Umgebungsvariablen \u00fcbergeben. Die folgenden drei Variablen m\u00fcssen definiert werden:</p> <ul> <li><code>CONTROLLER_HOST</code></li> <li><code>CONTROLLER_USERNAME</code></li> <li><code>CONTROLLER_PASSWORD</code></li> </ul> <p>Die Umgebungsvariablen werden auf der Kommandozeile mit dem <code>export</code> Kommando \u00fcbergeben, Key und Value werden durch ein Gleichzeichen (<code>=</code>) getrennt. F\u00fcr <code>CONTROLLER_USERNAME</code> beispielsweise die folgende Zeile kopieren und im Terminal einf\u00fcgen:</p> <pre><code>export CONTROLLER_USERNAME=admin\n</code></pre> <p>Exportiere alle drei Variablen. </p> <p>Nutze die Werte aus der Workshop-\u00dcbersichtsseite aus Abschnitt 3.  </p> <p>F\u00fcr die Variable <code>CONTROLLER_HOST</code> die URL des Red Hat Ansible Automation Controller, f\u00fcr die Variable <code>CONTROLLER_PASSWORD</code> das entsprechende Passwort.</p> Hilfe n\u00f6tig? Klick mich... <p>Kopiere die folgenden Zeile und erg\u00e4nze sie mit den korrekten Werten aus der Workshop-\u00dcbersichtsseite aus Abschnitt 3:</p> Red Hat Ansible Automation Platform URL<pre><code>export CONTROLLER_HOST=\n</code></pre> Red Hat Ansible Automation Platform User name<pre><code>export CONTROLLER_USERNAME=admin\n</code></pre> Red Hat Ansible Automation Platform Password<pre><code>export CONTROLLER_PASSWORD=\n</code></pre> <p>Mit dem folgenden Kommando kannst du pr\u00fcfen ob die Variablen erfolgreich exportiert wurden:</p> <pre><code>env | grep CONTROLLER\n</code></pre> <p>Alles erledigt?</p> <ul> <li> AAP-API Credentials als Umgebungsvariablen exportiert<ul> <li> <code>CONTROLLER_HOST</code></li> <li> <code>CONTROLLER_USERNAME</code></li> <li> <code>CONTROLLER_PASSWORD</code></li> </ul> </li> </ul>"},{"location":"part2/#2-credentials-im-ausfuhrungs-container-bekanntmachen","title":"2 - Credentials im (Ausf\u00fchrungs-) Container bekanntmachen","text":"<p>Du kannst jetzt das Playook mit dem folgenden Kommando ausf\u00fchren:</p> <pre><code>ansible-navigator run playbook_controller_automation.yml\n</code></pre> <p>Erwartete (!) Fehlermeldung</p> <pre><code>TASK [Ensure required connection variables are defined] ************************\nfatal: [localhost]: FAILED! =&gt; {\"assertion\": \"lookup('env', 'CONTROLLER_HOST') | length &gt; 0\", \"changed\": false, \"evaluated_to\": false, \"msg\": \"Variables for accessing Automation controller are missing! Export the variables.\"}\n</code></pre> <p>Es fehlen Variablen f\u00fcr den Login an der Ansible Automation Platform.</p> <p>Aber die Variablen habe ich doch im vorherigen Schritt definiert/exportiert?</p> Kurz und knappAusf\u00fchrliche Erkl\u00e4rung <p>Du musst die bestehende <code>ansible-navigator.yml</code> Konfigurationsdatei anpassen.</p> <p>Das <code>ansible-navigator</code> Binary startet bei jedem Aufruf einen (Podman-)Container, dieser Container ist eine isolierte Ausf\u00fchrungsumgebung (fast wie eine eigene, kleine Linux-Instanz), in dieser sind die von dir zuvor exportierten Umgebungsvariablen nicht bekannt.  </p> <p>Du musst die Umgebungsvariablen an den Container \u00fcbergeben (pass into the container), daf\u00fcr musst du die bestehende <code>ansible-navigator.yml</code> Konfigurationsdatei anpassen. Diese Datei legt einige Parameter f\u00fcr den Ansible Navigator fest (z.B. das verwendete Container Image, wo Log-Dateien gespeichert werden sollen,</p> <p>Schau in der Ansible Navigator Dokumentation nach, an welcher Stelle die folgende Konfiguration hinzugef\u00fcgt werden muss:</p> <pre><code>   environment-variables:\n     pass:\n        - CONTROLLER_HOST\n        - CONTROLLER_USERNAME\n        - CONTROLLER_PASSWORD\n</code></pre> <p>Kopiere den obigen Block und f\u00fcge ihn an der richtigen Stelle in der <code>ansible-navigator.yml</code> hinzu.</p> Hilfe n\u00f6tig? Klick mich... <p>Die Konfigurationsdatei muss folgenderma\u00dfen aussehen, du kannst sie mit einem kleinen Copy-Button im Textfeld kopieren:</p> ansible-navigator.yml<pre><code>---\nansible-navigator:\n  execution-environment:\n    image: registry.redhat.io/ansible-automation-platform-25/ee-supported-rhel8:latest\n    enabled: true\n    container-engine: podman\n    pull:\n      policy: missing\n    volume-mounts:\n      - src: \"/etc/ansible/\"\n        dest: \"/etc/ansible/\"\n    environment-variables:\n      pass:\n        - CONTROLLER_HOST\n        - CONTROLLER_USERNAME\n        - CONTROLLER_PASSWORD\n  logging:\n    level: warning\n    file: logs/ansible-navigator.log\n  mode: stdout\n  playbook-artifact:\n    enable: true\n    save-as: \"logs/{playbook_status}-{playbook_name}-{time_stamp}.json\"\n</code></pre> <p>F\u00fchre das Playbook mit dem folgenden Kommando erneut aus:</p> <pre><code>ansible-navigator run playbook_controller_automation.yml\n</code></pre> <p>Zumindest der Task <code>Ensure all hosts from web group are enabled</code> sollte jetzt erfolgreich durchlaufen (die Authentifizierung ist erfolgreich).</p> <p>Alles erledigt?</p> <ul> <li> Die <code>ansible-navigator.yml</code> Konfiguration ist angepasst</li> <li> Die drei Umgebgungsvariablen (<code>CONTROLLER_HOST</code>, <code>CONTROLLER_USERNAME</code>, <code>CONTROLLER_PASSWORD</code>) werden in den Container \u00fcbergeben und die Authentifizierung ist erfolgreich.</li> </ul>"},{"location":"part2/#3-automatisierung-anpassenvervollstandigen","title":"3 - Automatisierung anpassen/vervollst\u00e4ndigen","text":"<p>Zumindest der Tasks zur \u00dcberpr\u00fcfung der Variablen und ein weiterer l\u00e4uft bereits durch, trotzdem schl\u00e4gt die Ausf\u00fchrung noch fehl.  </p> Kurz und knappAusf\u00fchrliche Erkl\u00e4rung <p>Die Automatisierung ist unvollst\u00e4ndig, du musst sogenannte Project-Objekte erstellen.</p> <p>Die Automatisierung ist unvollst\u00e4ndig, wenn du das Playbook erneut ausf\u00fchrst, wird versucht ein Job-Template zu erstellen, welches auf ein nicht-existentes Project verweist.</p> <p>Failure</p> <pre><code>Request to /api/v2/projects/?name=Git+Repository+with+Ops+Playbooks returned 0 items, expected 1\n</code></pre> Kurz und knappAusf\u00fchrliche Erkl\u00e4rung <p>Ein Project in der AAP zeigt auf ein Git-Repository, es enth\u00e4lt allen Code f\u00fcr die Automatisierung. Ein Job Template legt die Parameter zur Ausf\u00fchrung dieses Codes fest, es muss daher wissen, aus welchem Project der Code kommen soll. Die AAP zieht alles zur Ausf\u00fchrung aus dem Git Repository und sorgt (durch die Auswahl einer Option) daf\u00fcr, dass vor jeder Ausf\u00fchrung der Automatisierung, der aktuellste Stand geladen wird.</p> <p>Ein Ansible Playbook besteht aus einer Liste an Tasks, du musst die fehlenden Tasks hinzuf\u00fcgen! </p> Kurz und knappAusf\u00fchrliche Erkl\u00e4rung <p>Klicke links im File Explorer auf die Datei <code>playbook_controller_automation.yml</code>.</p> <p>Klicke links im File Explorer auf die Datei <code>playbook_controller_automation.yml</code>, ab Zeile 24 sind die einzelnen Tasks (Schritte/Aufgaben) beschrieben, um den AAP Controller in den gew\u00fcnschten Zielzustand zu versetzen.</p> playbook_controller_automation.yml<pre><code>---\n- name: Prepare Automation Controller # (1)!\n  hosts: localhost # (2)!\n  connection: local\n  module_defaults: # (3)!\n    group/ansible.controller.controller:\n      controller_host: \"{{ lookup('env', 'CONTROLLER_HOST') }}\"\n      controller_username: \"{{ lookup('env', 'CONTROLLER_USERNAME') }}\"\n      controller_password: \"{{ lookup('env', 'CONTROLLER_PASSWORD') }}\"\n  pre_tasks: # (4)!\n    - name: Ensure required connection variables are defined\n      ansible.builtin.assert:\n        that:\n          - lookup('env', 'CONTROLLER_HOST') is defined\n          - lookup('env', 'CONTROLLER_HOST') | length &gt; 0\n          - lookup('env', 'CONTROLLER_USERNAME') is defined\n          - lookup('env', 'CONTROLLER_USERNAME') | length &gt; 0\n          - lookup('env', 'CONTROLLER_PASSWORD') is defined\n          - lookup('env', 'CONTROLLER_PASSWORD') | length &gt; 0\n        quiet: true\n        fail_msg: \"Variables for accessing Automation controller are missing! Export the variables.\"\n  tasks: # (5)!\n    - name: Ensure all hosts from web group are enabled\n      ansible.controller.host:\n        name: \"{{ item }}\"\n        inventory: Workshop Inventory\n        enabled: true\n        validate_certs: true\n      loop:\n        - node1\n        - node2\n        - node3\n# ... most tasks are cut for readability...\n</code></pre> <ol> <li>Der Name des Playbooks, wird auf der CLI bei der Ausf\u00fchrung ausgegeben.</li> <li>Das Ziel der Automatisierung, standartm\u00e4\u00dfig kommuniziert Ansible per SSH. Da wir eine API ansprechen wollen, k\u00f6nnen wir gegen <code>localhost</code> mit der Verbindungsmethode <code>local</code> ausf\u00fchren.</li> <li>Einige Standart-Parameter welche alle Module der <code>awx.awx</code> Collection bekommen sollen. In diesem Fall sind es die Authentifizierungs-Parameter, in jedem Task wird ein neuer API-Call zur AAP gemacht.</li> <li>Eine Liste an Tasks (hier nur ein einzelner), welche definitiv vor allen anderen laufen sollen. In diesem Fall wird eine Pr\u00fcfung der Umgebungsvariablen gemacht, sollten sie fehlen, wird eine sprechende Fehlermeldung ausgeben.</li> <li>Ab hier startet die eigentliche Automatisierung der AAP! In dieser Liste (im YAML-Format beginnt jedes Listenelement mit <code>-</code>) m\u00fcssen alle Tasks in der richtigen Reihenfolge aufgef\u00fchrt werden.</li> </ol> <p>Suche in der Ansible Dokumentation nach dem passenden Modul zur Erstellung eines Projects.  </p> <p>Tip</p> <p>Nutze die Examples (Beispiele) auf der Dokumentations-Seite des Moduls, du kannst ein Beispiel kopieren und einf\u00fcgen, anschlie\u00dfend passt du die Parameter an und f\u00fcgst fehlende Parameter hinzu. Der Modul-Name muss <code>ansible.controller.</code> statt mit <code>awx.awx.</code> beginnen!</p> <p>Du musst sowohl das Project mit dem Operations-Content, als auch das Project mit dem Development-Content hinzuf\u00fcgen (insgesamt also zwei Tasks).</p> <p>Task-(Name): <code>Add project with playbooks for Ops workloads</code></p> Key Value <code>name</code> <code>Git Repository with Ops Playbooks</code> <code>default_environment</code> <code>Default execution environment</code> <code>scm_type</code> <code>git</code> <code>scm_url</code> <code>https://github.com/ansible/workshop-examples.git</code> <code>scm_branch</code> <code>webops</code> <code>scm_update_on_launch</code> <code>true</code> <code>scm_delete_on_update</code> <code>true</code> <code>scm_clean</code> <code>true</code> <code>state</code> <code>present</code> <p>Task-(Name): <code>Add project with playbooks for Dev workloads</code></p> Key Value <code>name</code> <code>Git Repository with Dev Playbooks</code> <code>default_environment</code> <code>Default execution environment</code> <code>scm_type</code> <code>git</code> <code>scm_url</code> <code>https://github.com/ansible/workshop-examples.git</code> <code>scm_branch</code> <code>webdev</code> <code>scm_update_on_launch</code> <code>true</code> <code>scm_delete_on_update</code> <code>true</code> <code>scm_clean</code> <code>true</code> <code>state</code> <code>present</code> <p>Warning</p> Kurz und knappAusf\u00fchrliche Erkl\u00e4rung <p>Ein Ansible Playbook wird sequentiell abgearbeitet, die Reihenfolge ist entscheidend! Playbooks sind im YAML-Format geschrieben, hier kommt es auf die passende Einr\u00fcckung an, alle Tasks m\u00fcssen auf der gleichen Ebene starten!</p> <p>Ein Ansible Playbook wird sequentiell abgearbeitet, die Reihenfolge ist entscheidend! F\u00fcge die Tasks hinter dem Task <code>Ensure all hosts from web group are enabled</code>, aber vor dem Task <code>Create job template for infrastructure setup as Ops workload</code> ein. Playbooks sind im YAML-Format geschrieben, hier kommt es auf die passende Einr\u00fcckung an, alle Tasks m\u00fcssen auf der gleichen Ebene starten!</p> Hilfe n\u00f6tig? Klick mich... <p>Die folgenden beiden Tasks f\u00fcgen die notwendigen Project-Objekte hinzu:</p> <pre><code>- name: Add project with playbooks for Ops workloads\n  ansible.controller.project:\n    name: Git Repository with Ops Playbooks\n    default_environment: Default execution environment\n    scm_type: git\n    scm_url: https://github.com/ansible/workshop-examples.git\n    scm_branch: webops\n    scm_update_on_launch: true\n    scm_delete_on_update: true\n    scm_clean: true\n    state: present\n\n- name: Add project with playbooks for Dev workloads\n  ansible.controller.project:\n    name: Git Repository with Dev Playbooks\n    default_environment: Default execution environment\n    scm_type: git\n    scm_url: https://github.com/ansible/workshop-examples.git\n    scm_branch: webdev\n    scm_update_on_launch: true\n    scm_delete_on_update: true\n    scm_clean: true\n    state: present\n</code></pre> Gesamtes Playbook <pre><code>---\n- name: Prepare Automation Controller\n  hosts: localhost\n  connection: local\n  module_defaults:\n    group/ansible.controller.controller:\n      controller_host: \"{{ lookup('env', 'CONTROLLER_HOST') }}\"\n      controller_username: \"{{ lookup('env', 'CONTROLLER_USERNAME') }}\"\n      controller_password: \"{{ lookup('env', 'CONTROLLER_PASSWORD') }}\"\n  pre_tasks:\n    - name: Ensure required connection variables are defined\n      ansible.builtin.assert:\n        that:\n          - lookup('env', 'CONTROLLER_HOST') is defined\n          - lookup('env', 'CONTROLLER_HOST') | length &gt; 0\n          - lookup('env', 'CONTROLLER_USERNAME') is defined\n          - lookup('env', 'CONTROLLER_USERNAME') | length &gt; 0\n          - lookup('env', 'CONTROLLER_PASSWORD') is defined\n          - lookup('env', 'CONTROLLER_PASSWORD') | length &gt; 0\n        quiet: true\n        fail_msg: \"Variables for accessing Automation controller are missing! Export the variables.\"\n  tasks:\n    - name: Ensure all hosts from web group are enabled\n      ansible.controller.host:\n        name: \"{{ item }}\"\n        inventory: Workshop Inventory\n        enabled: true\n        validate_certs: true\n      loop:\n        - node1\n        - node2\n        - node3\n\n    - name: Add project with playbooks for Ops workloads\n      ansible.controller.project:\n        name: Git Repository with Ops Playbooks\n        default_environment: Default execution environment\n        scm_type: git\n        scm_url: https://github.com/ansible/workshop-examples.git\n        scm_branch: webops\n        scm_update_on_launch: true\n        scm_delete_on_update: true\n        scm_clean: true\n        state: present\n\n    - name: Add project with playbooks for Dev workloads\n      ansible.controller.project:\n        name: Git Repository with Dev Playbooks\n        default_environment: Default execution environment\n        scm_type: git\n        scm_url: https://github.com/ansible/workshop-examples.git\n        scm_branch: webdev\n        scm_update_on_launch: true\n        scm_delete_on_update: true\n        scm_clean: true\n        state: present\n\n    - name: Create job template for infrastructure setup as Ops workload\n      ansible.controller.job_template:\n        name: Web App Deploy\n        job_type: run\n        inventory: Workshop Inventory\n        project: Git Repository with Ops Playbooks\n        execution_environment: Default execution environment\n        playbook: rhel/webops/web_infrastructure.yml\n        credentials:\n          - Workshop Credentials\n        limit: web\n        become_enabled: true\n\n    - name: Create job template for infrastructure setup as Dev workload\n      ansible.controller.job_template:\n        name: Node.js Deploy\n        job_type: run\n        inventory: Workshop Inventory\n        project: Git Repository with Dev Playbooks\n        execution_environment: Default execution environment\n        playbook: rhel/webdev/install_node_app.yml\n        credentials:\n          - Workshop Credentials\n        limit: web\n        become_enabled: true\n\n    - name: Create DevOps workflow for infrastructure setup and Nginx deployment\n      ansible.controller.workflow_job_template:\n        name: Deploy Webapp Server\n        destroy_current_nodes: true\n        workflow_nodes:\n          - identifier: Approve Deployment\n            unified_job_template:\n              name: Approve Deployment\n              type: workflow_approval\n            related:\n              success_nodes:\n                - identifier: Web App Deploy\n          - identifier: Web App Deploy\n            unified_job_template:\n              name: Web App Deploy\n              type: job_template\n            related:\n              success_nodes:\n                - identifier: Node.js Deploy\n          - identifier: Node.js Deploy\n            unified_job_template:\n              name: Node.js Deploy\n              type: job_template\n\n    - name: Launch workflow\n      ansible.controller.workflow_launch:\n        workflow_template: Deploy Webapp Server\n        wait: false\n</code></pre> <p>Alles erledigt?</p> <ul> <li> Passendes Modul aus der Dokumentation identifiziert</li> <li> Task f\u00fcr Ops-Content Project hinzugef\u00fcgt</li> <li> Task f\u00fcr Dev-Content Project hinzugef\u00fcgt</li> </ul>"},{"location":"part2/#4-automatisierung-ausfuhren","title":"4 - Automatisierung ausf\u00fchren","text":"Kurz und knappAusf\u00fchrliche Erkl\u00e4rung <p>Im Terminal wieder das folgende Kommando ausf\u00fchren:</p> <pre><code>ansible-navigator run playbook_controller_automation.yml\n</code></pre> <p>Sobald alles vollst\u00e4ndig ist, kannst du die Automatisierung ausf\u00fchren. Im Terminal wieder das folgende Kommando ausf\u00fchren:</p> <pre><code>ansible-navigator run playbook_controller_automation.yml\n</code></pre> <p>Du wirst die einzelnen Task-Beschreibungen mit einem gelben Changed-Status sehen (wenn die Objekte angelegt/angepasst) werden, wenn alle Tasks erfolgreich abgearbeitet sind endet der Playbook-Run mit einem <code>Play Recap</code>.</p> <p> - Weiter gehts mit der Operations Stage!</p>"},{"location":"part3/","title":"Operations","text":"<p>Ab hier \u00fcbernimmt eine andere Abteilung bzw. ein anderer Verantwortungsbereich, der Ops-Teil des DevOps-Workflows.</p>"},{"location":"part3/#1-automatisierung-bestatigen","title":"1 - Automatisierung best\u00e4tigen","text":"<p>Der Automatisierungs-Workflow erwartet (in unserem Fall) eine manuelle Best\u00e4tigung, diese kannst du \u00fcber das Web-UI der AAP ausf\u00fchren. Ein Entwickler (Developer) hat diese Berechtigung nicht!  </p> <p>Success</p> <p>Logge dich auf dem Controller der Ansible Automation Platform ein, nutze den Link f\u00fcr den AAP Controller von der Workshop-\u00dcbersichtsseite.</p> <p>Im Controller-UI, klicke links auf Workflow Approvals. Best\u00e4tige die Ausf\u00fchrung mit .</p> <p>Im linken Men\u00fc auf Automation Execution \u2192 Jobs klicken und dort den Workflow Job ausw\u00e4hlen (auf <code>Deploy Webapp Server</code> klicken).</p> <p>Success</p> <p>Nach einer Weile ist der Workflow beendet, es wurden neue Server provisioniert, eine Grundkonfiguration wurde ausgebracht, ein Apache-Webserver gestartet und anschlie\u00dfend ein Node.js-Skript ausgef\u00fchrt..</p> <p>Ab sofort kann der Betrieb (Operations) den Automatisierungs-Workflow zur Bereitstellung der Infrastruktur und der Grundkonfiguration immer wieder ausf\u00fchren, dank des von den Entwicklern (Development) erstellten Automatisierungs-Code.</p> <p> - Geschafft! Hier gehts zu einem kurzen Recap!</p>"},{"location":"recap/","title":"Recap","text":"<p>Du hast einen kurzen Einblick in ein Automatisierungs-Projekt bekommen,</p> <p>Neben den gezeigten T\u00e4tigkeiten und Tools sind noch mindestens die folgenden Punkte Teil des normalen Arbeitsalltags eines Consultants:</p> <ul> <li>Call mit dem Kunden und den restlichen Teammitgliedern (Daily, Weekly, Stand-Ups, ...)</li> <li>Dokumentation schreiben (oft auch as Code wie dieser Workshop-Guide)</li> <li>Konzepte f\u00fcr Infrastructure as Code erarbeiten</li> <li>Git-Workflow (\u00c4dnerungen commiten, Merge Request erstellen, Code Reviews, ...)</li> <li>Container-Images (Execution Environments) erstellen, versionieren und ver\u00f6ffentlichen</li> <li>Plattform (Ansible Automation Platform) pflegen/administrieren (Platform aufbauen ist nat\u00fcrlich auch oft Bestandteil)</li> <li>CI/CD-Pipelines erstellen (z.B. f\u00fcr automatisiertes Testing der Playbooks oder auch automatisches Deployment der \u00c4nderungen)</li> <li>Kundenmitarbeiter schulen und anleiten</li> <li>...</li> </ul> <p>Und das ist nur ein kleiner Ausschnitt der T\u00e4tigkeiten aus dem Leben eines Automatisierungs-Consultants, die IT-Welt ist gro\u00df und vielf\u00e4ltig, je nach Einsatzbereich unterscheiden sich Tools und Anforderungen deutlich. Aber das macht es nat\u00fcrlich auch sehr spannend!</p>"}]}